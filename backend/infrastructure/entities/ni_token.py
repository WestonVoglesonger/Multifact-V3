from datetime import datetime
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import Integer, Text, String, ForeignKey, func, Column, Table
from .entity_base import EntityBase
from typing import List
from .ni_document import NIDocument
from backend.domain.models import DomainToken

ni_token_dependencies = Table(
    "ni_token_dependencies",
    EntityBase.metadata,
    Column("token_id", Integer, ForeignKey("ni_tokens.id", ondelete="CASCADE"), primary_key=True),
    Column("dependency_token_id", Integer, ForeignKey("ni_tokens.id", ondelete="CASCADE"), primary_key=True),
)

class NIToken(EntityBase):
    __tablename__ = "ni_tokens"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    ni_document_id: Mapped[int] = mapped_column(Integer, ForeignKey("ni_documents.id", ondelete="CASCADE"), nullable=False)
    token_uuid: Mapped[str] = mapped_column(String, nullable=False, unique=True)
    token_type: Mapped[str] = mapped_column(String, nullable=True)
    scene_name: Mapped[str] = mapped_column(String, nullable=True)
    component_name: Mapped[str] = mapped_column(String, nullable=True)
    order: Mapped[int] = mapped_column(Integer, nullable=False, default=0)
    content: Mapped[str] = mapped_column(Text, nullable=False)
    hash: Mapped[str] = mapped_column(String, nullable=False)

    ni_document: Mapped[NIDocument] = relationship("NIDocument", back_populates="tokens")
    dependencies: Mapped[List["NIToken"]] = relationship(
        "NIToken",
        secondary=ni_token_dependencies,
        primaryjoin=id == ni_token_dependencies.c.token_id,
        secondaryjoin=id == ni_token_dependencies.c.dependency_token_id,
        backref="dependents"
    )

    def to_domain_token(self) -> 'DomainToken':
        # dependencies can be resolved separately if needed
        return DomainToken(
            id=self.id,
            token_uuid=self.token_uuid,
            token_type=self.token_type,
            content=self.content,
            hash=self.hash,
            scene_name=self.scene_name,
            component_name=self.component_name,
            order=self.order,
            dependencies=[dependency.to_domain_token() for dependency in self.dependencies]
        )


    @classmethod
    def to_entity_token(cls, domain: DomainToken, ni_document_id: int) -> "NIToken":
        # Note: domain doesn't have id; we pass ni_document_id because we must know which doc it belongs to.
        # The `id` is generated by the DB, so we donâ€™t set it here.
        return cls(
            ni_document_id=ni_document_id,
            token_uuid=domain.token_uuid,
            token_type=domain.token_type,
            scene_name=domain.scene_name,
            component_name=domain.component_name,
            order=domain.order,
            content=domain.content,
            hash=domain.hash
        )